#include<iostream>
#include<queue>
using namespace std;

// Class of Node
class node{
    public:
    int data;
    node* left;
    node* right;
    node(int val){
        this->data=val;
        this->left=NULL;
        this->right=NULL;
    }
};

// Class of Creating Tree using Node class
node* tree(node* root){
    int data;
    cout<<"Enter the data: ";
    cin>>data;
    root=new node(data);
    // If we don't want any value or want NULL
    if(data==-1){
        return NULL;
    }
    cout<<"Enter the data u want to insert at the left of "<<data<<endl;
    root->left=tree(root->left);
    cout<<"Enter the data u want to insert at the right of "<<data<<endl;
    root->right=tree(root->right);
    return root;
}

//LNR
void inorder(node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}

//NLR
void preorder(node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
}

//LRN
void postorder(node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}

//LEVEL
void levelorder(node* root){
    queue <node*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        node* temp=q.front();
        q.pop();
        if(temp==NULL){
            // Previous level is traversed , now need a separator
            cout<<endl;
            // IMP "Queue still have some child nodes"
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            cout<<temp->data<<" ";
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
}

// Main Class
int main(){
    node* root=NULL;
    root=tree(root);
    levelorder(root);
    cout<<endl;
    inorder(root);
    cout<<endl;
    preorder(root);
    cout<<endl;
    postorder(root);
    cout<<endl;
    return 0;
}
