// Doubly ended queue
// Header File-> <Deque>
#include<iostream>
using namespace std;
class Deque{
    int* arr;
    int front;
    int rear;
    int size;
    public:
    Deque(int n){
        size=n;
        arr=new int[size];
        front=-1;
        rear=-1;
    }
    bool empty(){
        if(front==-1){
            return true;
        }
        return false;
    }
    bool full(){
        if((front==0&&rear==size-1)||(front!=0&&rear==(front-1)%(size-1))){
            return true;
        }
        return false;
    }
    void push_front(int ele){
        if (full()){
            cout<<"Queue Overflow";
            return;
        }
        else if(empty()){
            front=0;
            rear=0;
        }
        //To maintain the cyclic nature
        else if(front==0&&rear!=size-1){
            front=size-1;
        }
        else{
            front--;
        }
        arr[front]=ele;
    }
    void push_back(int ele){
        if (full()){
            cout<<"Queue Overflow";
            return;
        }
        else if(empty()){
            front=0;
            rear=0;
        }
        //To maintain the cyclic nature
        else if(front!=0&&rear==size-1){
            rear=0;
        }
        else{
            rear++;
        }
        arr[rear]=ele;
    }
    int show_front(){
        if(empty()){
            cout<<"Queue is Empty!"<<endl;
            return -1;
        }
        return arr[front];
    }
    int show_rear(){
        if(empty()){
            cout<<"Queue is Empty!"<<endl;
            return -1;
        }
        return arr[rear];
    }
    int pop_front(){
        int ans;
        if(empty()){
            ans=-1;
        }
        //To save the memory
        if(front==rear){
            front=rear=-1;
        }
        //To maintain the cyclic nature
        else if(front==size-1){
            ans=arr[front];
            arr[front]=-1;
            front=0;
        }
        else{
            ans=arr[front];
            front++;
        }
        return ans;
    }
    int pop_back(){
        int ans;
        if(empty()){
            ans=-1;
        }
        //To save the memory
        if(front==rear){
            front=rear=-1;
        }
        //To maintain the cyclic nature
        else if(rear==0){
            ans=arr[rear];
            arr[rear]=-1;
            rear=size-1;
        }
        else{
            ans=arr[rear];
            rear--;
        }
        return ans;
    }
};
int main(){
    Deque d1(2);
    d1.push_front(10);
    d1.push_back(20);
    d1.pop_front();
    cout<<d1.show_front()<<endl;
    cout<<d1.show_rear()<<endl;
    return 0;
}